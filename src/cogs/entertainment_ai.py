"""
Cog de Entretenimento com IA
"""
import discord
from discord.ext import commands
from openai import OpenAI
from config.settings import OPENAI_API_KEY, EMBED_COLORS, OPENAI_MODEL
from src.utils.helpers import send_temp_message

class EntertainmentAI(commands.Cog):
    """Comandos de entretenimento que usam IA."""

    def __init__(self, bot):
        self.bot = bot
        self.openai_client = OpenAI(api_key=OPENAI_API_KEY)
        # Armazena as hist√≥rias ativas por canal: { channel_id: [messages] }
        self.active_stories = {}
        # Armazena os jogos de adivinha√ß√£o: { channel_id: { "secret": "palavra", "messages": [] } }
        self.active_guesses = {}

    @commands.command(name='historia', help='Cria uma hist√≥ria interativa com IA. Use c.historia fim para terminar.')
    async def historia(self, ctx, *, action: str = None):
        """Inicia ou continua uma hist√≥ria interativa.
        
        Se n√£o houver hist√≥ria, uma nova come√ßa.
        Se houver, sua a√ß√£o continua a narrativa.
        Use 'c.historia fim' para encerrar a hist√≥ria atual.
        """
        channel_id = ctx.channel.id

        # Subcomando para terminar a hist√≥ria
        if action and action.lower() == 'fim':
            if channel_id in self.active_stories:
                del self.active_stories[channel_id]
                embed = discord.Embed(
                    title="üìñ Fim da Hist√≥ria",
                    description="A aventura neste canal foi conclu√≠da. Comece uma nova com `c.historia`!",
                    color=EMBED_COLORS['info']
                )
                await ctx.send(embed=embed)
            else:
                await send_temp_message(ctx, "N√£o h√° nenhuma hist√≥ria em andamento neste canal.", 10)
            return

        async with ctx.typing():
            # Iniciar uma nova hist√≥ria
            if channel_id not in self.active_stories:
                system_prompt = (
                    "Voc√™ √© um Mestre de RPG para Discord. Sua tarefa √© criar e narrar uma hist√≥ria de aventura interativa. "
                    "Comece com uma introdu√ß√£o intrigante em um cen√°rio de fantasia, terror ou fic√ß√£o cient√≠fica. "
                    "Apresente uma situa√ß√£o e termine sempre com a pergunta: 'O que voc√™ faz agora?'. "
                    "Mantenha as respostas com no m√°ximo 2 par√°grafos."
                )
                
                messages = [{"role": "system", "content": system_prompt}]
                
                try:
                    response = self.openai_client.chat.completions.create(
                        model=OPENAI_MODEL,
                        messages=messages,
                        max_tokens=300
                    )
                    story_part = response.choices[0].message.content

                    # Salvar o contexto
                    messages.append({"role": "assistant", "content": story_part})
                    self.active_stories[channel_id] = messages

                    embed = discord.Embed(
                        title="üìñ Uma Nova Aventura Come√ßa!",
                        description=story_part,
                        color=EMBED_COLORS['success']
                    )
                    embed.set_footer(text="Responda com 'c.historia [sua a√ß√£o]' ou 'c.historia fim' para terminar.")
                    await ctx.send(embed=embed)

                except Exception as e:
                    await ctx.send(f"‚ùå Erro ao contatar a IA: {e}")
                return

            # Continuar uma hist√≥ria existente
            if not action:
                await send_temp_message(ctx, "Uma hist√≥ria j√° est√° em andamento. Diga o que voc√™ quer fazer com `c.historia [sua a√ß√£o]`.", 10)
                return

            messages = self.active_stories[channel_id]
            messages.append({"role": "user", "content": action})

            try:
                response = self.openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=messages,
                    max_tokens=300
                )
                story_part = response.choices[0].message.content

                # Atualizar o contexto
                messages.append({"role": "assistant", "content": story_part})
                self.active_stories[channel_id] = messages

                embed = discord.Embed(
                    title="‚öîÔ∏è A Aventura Continua...",
                    description=story_part,
                    color=EMBED_COLORS['info']
                )
                embed.set_footer(text="Responda com 'c.historia [sua a√ß√£o]' ou 'c.historia fim' para terminar.")
                await ctx.send(embed=embed)

            except Exception as e:
                await ctx.send(f"‚ùå Erro ao contatar a IA: {e}")

    @commands.group(name='adivinhar', help='Jogue um jogo de adivinha√ß√£o com a IA.', invoke_without_command=True)
    async def adivinhar(self, ctx, *, question: str = None):
        channel_id = ctx.channel.id

        if ctx.invoked_subcommand is None:
            # Se n√£o h√° jogo ativo, come√ßa um novo
            if channel_id not in self.active_guesses:
                async with ctx.typing():
                    system_prompt = (
                        "Voc√™ √© um mestre do jogo de adivinha√ß√£o. Pense em um objeto, animal ou personagem famoso. "
                        "Guarde este segredo. Responda √†s perguntas do usu√°rio apenas com 'Sim', 'N√£o', 'Quase', 'Talvez', 'Irrelevante' ou 'Pode ser'. "
                        "Primeiro, diga ao usu√°rio que voc√™ pensou em algo e pe√ßa a primeira pergunta."
                    )
                    
                    # Gerar um segredo aleat√≥rio
                    secret_response = self.openai_client.chat.completions.create(
                        model=OPENAI_MODEL,
                        messages=[{"role": "system", "content": "Gere uma √∫nica palavra ou nome de personagem/animal para um jogo de adivinha√ß√£o. Ex: 'elefante', 'Napole√£o Bonaparte', 'vassoura'."}],
                        max_tokens=20
                    )
                    secret_word = secret_response.choices[0].message.content.strip().replace('.', '')

                    messages = [
                        {"role": "system", "content": system_prompt},
                        {"role": "system", "content": f"O segredo que voc√™ pensou √©: '{secret_word}'. Lembre-se disso e n√£o revele."}
                    ]
                    
                    # Mensagem inicial da IA
                    initial_response = self.openai_client.chat.completions.create(
                        model=OPENAI_MODEL,
                        messages=messages,
                        max_tokens=50
                    )
                    initial_message = initial_response.choices[0].message.content

                    messages.append({"role": "assistant", "content": initial_message})
                    self.active_guesses[channel_id] = {"secret": secret_word, "messages": messages}

                    embed = discord.Embed(
                        title="ü§î Jogo da Adivinha√ß√£o",
                        description=initial_message,
                        color=EMBED_COLORS['info']
                    )
                    embed.set_footer(text="Use 'c.adivinhar [pergunta]', 'c.adivinhar chutar [palpite]' ou 'c.adivinhar fim'.")
                    await ctx.send(embed=embed)
                return
            
            # Se h√° um jogo ativo, processa a pergunta
            if not question:
                await send_temp_message(ctx, "Um jogo j√° est√° em andamento. Fa√ßa uma pergunta ou use `c.adivinhar chutar [palpite]`.", 10)
                return

            async with ctx.typing():
                game = self.active_guesses[channel_id]
                game["messages"].append({"role": "user", "content": question})

                response = self.openai_client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=game["messages"],
                    max_tokens=20
                )
                answer = response.choices[0].message.content

                game["messages"].append({"role": "assistant", "content": answer})
                self.active_guesses[channel_id] = game

                await ctx.send(f"**Sua pergunta:** `{question}`\n**Resposta da IA:** `{answer}`")

    @adivinhar.command(name='chutar')
    async def adivinhar_chutar(self, ctx, *, guess: str):
        channel_id = ctx.channel.id
        if channel_id not in self.active_guesses:
            await send_temp_message(ctx, "Nenhum jogo de adivinha√ß√£o ativo. Comece um com `c.adivinhar`.", 10)
            return

        game = self.active_guesses[channel_id]
        secret = game['secret']

        # Pergunta para a IA se o chute est√° correto
        verification_prompt = [
            {"role": "system", "content": f"O segredo √© '{secret}'. O usu√°rio chutou '{guess}'. A resposta est√° correta? Responda apenas 'sim' ou 'n√£o'."}
        ]
        
        response = self.openai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=verification_prompt,
            max_tokens=5
        )
        is_correct = response.choices[0].message.content.lower()

        if 'sim' in is_correct:
            embed = discord.Embed(
                title="üéâ Voc√™ Acertou!",
                description=f"Parab√©ns, a resposta era **{secret}**!",
                color=EMBED_COLORS['success']
            )
            await ctx.send(embed=embed)
            del self.active_guesses[channel_id]
        else:
            embed = discord.Embed(
                title="‚ùå Errado!",
                description=f"N√£o, a resposta n√£o √© `{guess}`. Tente novamente!",
                color=EMBED_COLORS['error']
            )
            await ctx.send(embed=embed)

    @adivinhar.command(name='fim')
    async def adivinhar_fim(self, ctx):
        channel_id = ctx.channel.id
        if channel_id in self.active_guesses:
            secret = self.active_guesses[channel_id]['secret']
            embed = discord.Embed(
                title="ü§î Fim de Jogo",
                description=f"O jogo terminou. A resposta era **{secret}**.",
                color=EMBED_COLORS['info']
            )
            await ctx.send(embed=embed)
            del self.active_guesses[channel_id]
        else:
            await send_temp_message(ctx, "Nenhum jogo de adivinha√ß√£o ativo para terminar.", 10)


async def setup(bot):
    await bot.add_cog(EntertainmentAI(bot))
